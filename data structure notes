MATRICS & LIST COMPREHENSION

# MATRIX

# Matrix: is a representation of numbers, symbols or expressions in a 2 dimensional array. 

# Can create data structers that has values in rows and columns, much like a table.

# a list within a list

# Representation of matrix

matrix_A = [
    [1,2,3,4,5],
    [6,7,8,9,10]
]

# Accesing our matrix
print('row1:', matrix_A[0])
print('Row 2 Column 2:', matrix_A[1][1])

# rules of matrix
'''
- All rows must have the same number of values
- All columns must have the same number of values
- All items in the 2D List must have the same data types
- Since indexing always starts at 0 ... row 1 is technically located at matrix_A[0]
'''

# LIST COMPREHENSION

# list comprehension is a conise method to create list in python 3.

# Used when
'''
-The list is a result of some operations applied to all its items
-It is a made from another sequence/iterable data
-The list is member of another list/sequence/iterable data that satisfies a certain condition
'''
# Normal way
squares = []
for i in range(10):
    squares.append(i**2)
print('our result', squares)

# List comprehension way
squares = [i**2 for i in range(10)]
print('our result', squares)

# How it works:
'''
-A Square Bracket containing an expression that describes the list
-One or more For clause to explain its members
-Then a zero or more if clauses depending on the complexity of the list
'''
# i**2 for i in range(10) --> is the expression that describes the list.

# i**2 describes each item in the list

# i is taken from the clause 

# for i in range(10) describes where i comes from.

# EXAMPLE 2

a = [1,2,3]
b = [3,1,4]

result = [[x,y] for x in a for y in b if x !=y]
print(result)

# x comes from a
# y comes from b

# EXAMPLE 3

vec = [[1,2,3], [4,5,6], [7,8,9,]]
result = [value for row in vec for value in row]
print(result)

# vec is an example of a matrix in python 3 by uding list of lists

# to grab each value we must explain what each item in the list comprehension is going to be. named value.
# to access value where value is, define where it comes from in our case --. 'row'; there we use 'for row in vec'. finally we use our last clause to denote that value comes from the row.

# CLAUSES MATTER.


MAP & FILTER

# the idea of a map function is to apply a function to an iterable data type.

# formatting: map(function_name, sequence)

# - where the function name is any function (built in or not) that returns a desired value of choice
# - sequence is an iterable data type

# EXAMPLE

def square(num):
    # square is the given num argument
    return num ** 2
array = list(range(1,11))
square_array = list(map(square, array))
# takes value from square function 
print('array sqaured', square_array)

# our original array is just a count up to 11

# our sqared array is the numbers to 11 squared

# map functions dont return a specific data type, but rather an iterabele data type.

# EXAMPLE 2

def upper(x):
    # upper returns string x into upper case
    return x.upper()
word = 'hello world'
upper_word = ''.join(list(map(upper, word)))
print(word)
print(upper_word)
print(word.upper())
'''
In Example 2, we perform a lot of extra effort to make our original word variable uppercase. This is an example of why you shouldn't use map() to make minor modifications to a string.

This holds true for every data structure with methods. You don't want to use methods with map since there is a good chance that there is already a method for what you want to achieve
'''

FILTER FUNCTION
The idea is to filter out items from a data set that meets a certain condition

 formatting: filter(bool_returning_function, sequence)

- function: The function name we provide for filter() must be return a boolean value ... should also be able handle the items inside the sequence as its arguments
-- sequence: any iterable data type

IS ODD FILTER

def isOdd(x):
    # returns true if x is odd
    return x % 2 != 0


array = list(range(1,101))
odds = list(filter(isOdd, array))

print('Odd Numbers from 1 to 100:', odds)

 filters out variables that satisfy the condition above (make condition = True)
 
 FILTER PALINDROME

def isPalindrome(x):
    # if x is a palindrome return true
    return x == x[::-1]
array = list(range(1,1000))
palindrome_numbers = list(map(int, filter(isPalindrome, map(str, array))))
print('Palindromic Numbers from 1 to 10,000', palindromicNumbers

 string version of the array --> map(str, array)
      '''
      Function Composition Breakdown
1. string version of the array --> map(str, array)
2. filter out the palindrome --> filter(isPalindrome, string version of the array)
3. remap all values back to integers --> map(int, palindromes)
4. turn the mapped integers iterable back inside a list --> list(palindromicIterables)

How it would looked with multiple defined variables:

array = list(range(1,10000))
str_array = map(str, array)
palindromes = filter(isPalindrome, str_array)
palindromics = map(int, palindromes)

palindromic_numbers = list(palindromes)
'''









TUPLES

-strings and lists are very similar though they do have their key differnces.

-strings only allow alphanumeric characters and special symbols to represent text, while lists allow all data types . Strings are also immutable while lists are.
these differnces may cause some problems for us, therefore we have tuples.

How to use tuples.

- tuples are declared with (). This is an example of an empty tuple.
-(50, ) is a singleton tuple; the comma is required.
- it is important to note that tuples are slicable, therefore indexalbe using square brackets.

tup = ('C', ' Java', 'Python')
empty_tup = ()
single_tup = ('Park',)

print(tup)
print(empty_tup)
print(single_tup)

this outputs

('C', ' Java', 'Python')
()
('Park',)


some tuple operators can be:
- Concatenation: Joining two tuples
a = (1,2,3)
b = (4,5,6)
concat_result = a + b
print('a+b:', concat_result)


Repetition: 
c = ('Hi!',)
repet_result = c * 3
print('c*3', repet_result)

Membership: 
d = a + b + c
print('d:', d)
print('\'Hi!\' in d:', 'Hi!' in d)
print('7 in d:', 7 in d)

this outputs 

a+b: (1, 2, 3, 4, 5, 6)
c*3 ('Hi!', 'Hi!', 'Hi!')
d: (1, 2, 3, 4, 5, 6, 'Hi!')
'Hi!' in d: True
7 in d: False


AN EXAMPLE OF TUPLES BEING ITERABLE, INDEXABLE AND SLICEABLE

example = ('C', 'Java', 'Python', 'C#', 'JavaScript')
-iteration
print('Tuple example items:')
for language in example:
    print(language)
print('--')

# Indexing
print('Index 1:', example[1])
print('Last Value:', example[-1])

# Slicing
print('Backwards:', example[::-1])
print('Every other:', example[::2])
print('From 1 to end:', example[1:])
print('From 1 to 3:', example[1:3])


BUILT IN FUNCTION WITH TUPLES
example = ('C', 'Java', 'Python', 'C#', 'JavaScript')

print('Length:', len(example))
print('Minimum value:', min(example))
print('Maximum value:', max(example))
print('--')

word = 'Hello'
array = [1,2,3,4]
array_array = [[1],[2,3],[4]]

print('String to Tuple:', tuple(word))
print('List to Tuple:', tuple(array))
print('2D array to Tuple:', tuple(array_array))
print('--')

array_array[0][0] = 'p'
print(array_array)

# these function work the same way they do for other data types.

TUPLE COMPREHENSION
# Tuple of Even values from 1 to 100
even_tup = tuple(i for i in range(1,101) if i % 2 == 0)

print(even_tup)

PRINTS OUT ALL EVEN VALUES FROM 1 - 100

TUPLE PACKING AND UNPACKING

# Examine the following code

# Packing
var_1 = 2
var_2 = 3
var_3 = 5

prime = var_1, var_2, var_3

print('Packed prime values:', prime)

# Unpacking and Repacking
fib = (0, 1, 1, 2, 3, 5, 8)

fib_0, fib_1, fib_n = fib[0], fib[1], fib[2:]
print('fib_0:', fib_0)
print('fib_1:', fib_1)
print('fib_n:', fib_n)

EXPLAAION: packing multiple values and putting them into a single variable

Unpacking help us assign certain values from a tuple to different variables
This becomes very useful skill when combined with variable arguments for Function Definition and Function Calls






SETS

-a set is an unordered collection with no duplicate elements in Python 
-it is a mathematical way to describe collection of different unique objects
-we can utilize such data structure by the follwing operations and characteristics of the mathematical set.

DEFINING A SET CODE
this is how to define a set
example_set1 = {1, 2, 3}
example_set2 = {'h','e','l','l','o'}

print('example_set1:', example_set1)
print('example_set2:', example_set2) # Notice there is only 1 'l'; Also notice the order of the values outputted
print('--')

singleton_set = {7}
empty_set = set() # this is because {} is reversed for a different feature in python 3.

print('Singleton:', singleton_set)
print('Empty Set:', empty_set)

BASIC BUILT IN FUNCTIONS WITH IT


example_set = set('hello') # set() turns an iterable into a set
print('example_set:', example_set)
print('--')

print('Number of Values:', len(example_set)) # length function
print('Minimum Value:', min(example_set)) # min function
print('Maximum Value:', max(example_set)) # max function
print('--')

# tuple to set
tup = (2,3,5,7)
print('tup to set:', set(tup))

# list to set
array = ['orange']*2 +  ['watermelon', 'apple'] + ['kiwi'] * 10
print('Original Array:', array)
print('list to set:', set(array))

example_set: {'o', 'e', 'h', 'l'}
--
Number of Values: 4
Minimum Value: e
Maximum Value: o
--
tup to set: {2, 3, 5, 7}
Original Array: ['orange', 'orange', 'watermelon', 'apple', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'kiwi']
list to set: {'watermelon', 'orange', 'apple', 'kiwi'}

BASIC MEMPERSHIP OPERATORS

Membership is one of the key operations with set because:

A set has no duplicates
A setâ€™s membership operation is one of the fastest operations compared to strings, lists, or tuples this will be covered more when we look at the concept of: complexity
By using membership operator, we can be certain a target exists or does not exist in our data
# Membership Example
example_set = set('hello')

print("Membership of: \'h\'", 'h' in example_set)
print("Non-Membership of: \'z\'", 'z' not in example_set)
Membership of: 'h' True
Non-Membership of: 'z' True

 HOW TO ACCESS VALUE IN SET
 

Due to its unordered nature of a set, there is no concept of indexing or slicing with a set.
Set is however iterable.
# Iteration of a Set
example_set = {2,3,5,7,11,13}

for v in example_set:
    print('Values of example_set:', v)
Values of example_set: 2
Values of example_set: 3
Values of example_set: 5
Values of example_set: 7
Values of example_set: 11


ADDING VALUES AND REMOVING VALUES IN SET

Sets are mutable; therefore, we can add and remove values
There are also methods much lists that can affect the original sets as well
# Adding and Removing Values
languages = set() # empty set initialization

programming_languages = ['C', 'C#', 'Java', 'Python', 'HTML', 'CSS', 'JavaScript', 'Haskell']

for item in programming_languages:
    languages.add(item) # .add() method adds an item to a set

print('Languages set:', languages)
print('--')

languages.discard('HTML') # looks for the target value, if found, it will remove from the set
print('HTML deleted:', languages)

languages.remove('CSS') # remove can be used to delete a value;
# only difference is it will raise an error if the target is not found
print('CSS deleted:', languages)

random_remove = languages.pop() # .pop() method deletes a random value and return the value ... not recommended
print('Randomly Removed value:', random_remove)

languages.clear() # .clear() will empty out a set : output is set()
print('Empty languages:', languages)
Languages set: {'HTML', 'CSS', 'JavaScript', 'Python', 'Haskell', 'Java', 'C', 'C#'}
--
HTML deleted: {'CSS', 'JavaScript', 'Python', 'Haskell', 'Java', 'C', 'C#'}
CSS deleted: {'JavaScript', 'Python', 'Haskell', 'Java', 'C', 'C#'}
Randomly Removed value: JavaScript
Empty languages: set()

SET OPERATORS

Sets in Python 3 can be used to do sophisticated calculations in the same way that their mathematical equivalent can.

Because sets are mutable, the majority of these operators will have a method counterpart.


To make our life easier, we will demonstrate these operators with a set of strings, although this may easily be done with any type of set.

SOME OPERATORS ARE:

Union
Intersection
Difference
Symmetric Difference
Proper Subset
Subset
Proper Superset
Superset

Union: The joining/combining of two sets.

# Union Example:
set1 = set('hello')
set2 = set('world')

result = set1 | set2 # | is the union operator ... all the members of both set are combined to a single set
# Recall that: there are no duplicates
print('set1 union set 2:', result)
set1 union set 2: {'h', 'w', 'e', 'r', 'l', 'd', 'o'}

Intersection: Members/Items that only exists in both sets.

# Union Example:
set1 = set('hello')
set2 = set('world')

result = set1 & set2 # & is the intersection operator
print('Intersection of set1 and set2:', result)
Intersection of set1 and set2: {'o', 'l'}
Difference: Members/items that only exists in the first set and not the second set.

# Difference Example:
set1 = set('hello')
set2 = set('world')

result1 = set1 - set2 # - is the difference operator ... this is set1 difference set2
result2 = set2 - set1 # set2 difference set1

print('set1 - set2:', result1)
print('set2 - set1:', result2)
set1 - set2: {'e', 'h'}
set2 - set1: {'w', 'd', 'r'}
Symmetric Difference: Members/items that exists one or the other set, but not both sets

# Symmetric Difference Example:
set1 = set('hello')
set2 = set('world')

result = set1 ^ set2 # ^ is the symmetric difference operator

print('Symmetric Difference of:', result)
Symmetric Difference of: {'e', 'h', 'w', 'd', 'r'}
Proper Subset: This is a boolean operator.

A is proper subset of B if all members of A is found in B, but A cannot be exactly the same as B
# Proper Subset Example:
set1 = {1,2,3}
set2 = {1,2,3,4}
set3 = {1,2,3}
set4 = set('hello')

print('Is set1 proper subset of set2?:', set1 < set2) # < is the proper subset operator
print('Is set1 proper subset of set3?:', set1 < set3)
print('Is set1 proper subset of set4?:', set1 < set4)
Is set1 proper subset of set2?: True
Is set1 proper subset of set3?: False
Is set1 proper subset of set4?: False
Subset: This is a boolean operator

A is a Proper Subset of B if A < B is True, but A can equal to B unlike a proper subset
# Subset Example:
set1 = {1,2,3}
set2 = {1,2,3,4}
set3 = {1,2,3}
set4 = set('hello')

print('Is set1 a subset of set2?:', set1 <= set2) # <= is the subset operator
print('Is set1 a subset of set3?:', set1 <= set3) # Notice the difference in value here
print('Is set1 a subset of set4?:', set1 <= set4)
Is set1 a subset of set2?: True
Is set1 a subset of set3?: True
Is set1 a subset of set4?: False
Proper Superset: This is a boolean operator

A is a proper superset of B if A has all the values of B and more, but they are not equal to each other
# Superset Example:
set1 = {1,2,3,4}
set2 = {1,2,3,4}
set3 = {1,2,3}
set4 = set('hello')

print('Is set1 proper superset of set2?:', set1 > set2) # > is the proper superset operator
print('Is set1 proper superset of set3?:', set1 > set3)
print('Is set1 proper superset of set4?:', set1 > set4)
Is set1 proper superset of set2?: False
Is set1 proper superset of set3?: True
Is set1 proper superset of set4?: False
Superset: This is a boolean operator

A is a superset of B if A > B or A == B
# Superset Example:
set1 = {1,2,3,4}
set2 = {1,2,3,4}
set3 = {1,2,3}
set4 = set('hello')

print('Is set1 superset of set2?:', set1 >= set2) # >= is the proper superset operator
print('Is set1 superset of set3?:', set1 >= set3)
print('Is set1 superset of set4?:', set1 >= set4)
Is set1 superset of set2?: True
Is set1 superset of set3?: True
Is set1 superset of set4?: False

   DISJOINT
  
  Two set are consided disjointed when two sets share no common value.

Let A and B both represent a set.
If A & B is empty, then set A and B are considered disjointed.
To check this in python there is a method called: isdisjoint()
Recall: & is the intersection operator

# Disjoint Example
# .isdisjoint() is a set method to check for such property between two sets.

set1 = {1,2,3,4}
set2 = {5,6,7}
set3 = {1,2,3,4,5}

print('set1 intersect set2:', set1 & set2) # Output is an empty set
print('set1 intersect set3:', set1 & set3) # Output is an non-empty set
print('--')
print('set 1 disjoint set 2 check:', set1.isdisjoint(set2)) # Therefore .isdisjoint() evaluates to True
print('set 1 disjoint set 3 check:', set2.isdisjoint(set3))
set1 intersect set2: set()
set1 intersect set3: {1, 2, 3, 4}
--
set 1 disjoint set 2 check: True
set 1 disjoint set 3 check: False
Set Operators as Methods
# Union
a = set('abracadabra')
b = set('alacazam')

a.union(b)
print('Union:', a)

# Intersection
a = set('abracadabra')
b = set('alacazam')

a.intersection(b)
print('Intersection:', a)

# Difference
a = set('abracadabra')
b = set('alacazam')

a.difference(b)
print('Difference:', a)

# Symmeteric Difference
a = set('abracadabra')
b = set('alacazam')

a.symmetric_difference(b)
print('Symmetric Difference:', a)

# Subset
a = set('abracadabra')
b = set('alacazam')

print('Subset:', a.issubset(b))

# Superset
a = set('abracadabra')
b = set('alacazam')

print('Superset:', a.issuperset(b))
print('--')

# There are no proper subset/superset methods

# copy
a = set('abracadabra')
b = a.copy()
c = a

a.add('z')
print('.copy() examples:')
print('set a:', a)
print('set b:', b)
print('set c:', c)
Union: {'b', 'a', 'r', 'd', 'c'}
Intersection: {'b', 'a', 'r', 'd', 'c'}
Difference: {'b', 'a', 'r', 'd', 'c'}
Symmetric Difference: {'b', 'a', 'r', 'd', 'c'}
Subset: False
Superset: False
--
.copy() examples:
set a: {'b', 'a', 'z', 'r', 'd', 'c'}
set b: {'b', 'a', 'd', 'r', 'c'}
set c: {'b', 'a', 'z', 'r', 'd', 'c'}
Assignment Operation & Updating Methods

This is a way to affect an original set with another and assign the result back to the original set
# Union and Update --> Update the set, adding elements from all others.
a = set('abracadabra')
b = set('alacazam')

a |= b # same as: a.update(b)
print('Union Update:', a)

# Intersection and Update --> Update the set, keeping only elements found in it and all others.
a = set('abracadabra')
b = set('alacazam')

a &= b # same as: a.intersection_update(b)
print('Intersection Update:', a)

# Difference and Update --> Update the set, removing elements found in others.
a = set('abracadabra')
b = set('alacazam')

a -= b # same as: a.difference_update(b)
print('Difference Update:', a)

# Symmetric Difference and Update --> Update the set, keeping only elements found in either set, but not in both.
a = set('abracadabra')
b = set('alacazam')

a ^= b # same as: a.symmetric_difference_update(b)
print('Symmeteric Difference Update:', a)
Union Update: {'b', 'a', 'z', 'r', 'l', 'm', 'd', 'c'}
Intersection Update: {'c', 'a'}
Difference Update: {'b', 'r', 'd'}
Symmeteric Difference Update: {'b', 'z', 'r', 'l', 'm', 'd'}
Set Comprehension
Much like list comprehension, sets support comprehension as well.

# Set Comprehension Example
def isPalindrome(x):
    ''' isPalindrome() returns True if string X is a palindrome '''
    return x == x[::-1]

nums = list(range(1,10000))
palindromic_set = {num for num in nums if isPalindrome(str(num))}

print('Palindromic Numbers Set from 1 to 10000:')
print(palindromic_set)
Palindromic Numbers Set from 1 to 10000:
{1, 2, 3, 4, 5, 6, 7, 8, 9, 515, 11, 6666, 525, 9229, 1551, 4114, 22, 535, 33, 545, 5665, 8228, 3113, 555, 44, 9779, 565, 55, 4664, 7227, 575, 2112, 66, 585, 8778, 77, 3663, 6226, 595, 1111, 88, 606, 7777, 99, 101, 2662, 616, 5225, 111, 626, 6776, 121, 9339, 636, 1661, 4224, 131, 646, 141, 5775, 656, 8338, 151, 3223, 666, 161, 9889, 676, 4774, 7337, 171, 686, 2222, 181, 696, 8888, 3773, 191, 6336, 707, 1221, 202, 717, 7887, 212, 2772, 727, 5335, 222, 737, 6886, 232, 9449, 747, 1771, 4334, 242, 757, 252, 5885, 767, 8448, 3333, 262, 777, 9999, 272, 787, 4884, 7447, 282, 2332, 797, 292, 8998, 808, 3883, 6446, 303, 9009, 818, 1331, 313, 828, 7997, 2882, 323, 5445, 838, 8008, 333, 848, 6996, 343, 9559, 1881, 858, 4444, 7007, 353, 868, 363, 5995, 878, 8558, 3443, 373, 6006, 888, 383, 898, 4994, 7557, 393, 2442, 909, 5005, 404, 919, 3993, 6556, 414, 9119, 929, 1441, 4004, 424, 939, 2992, 434, 5555, 949, 8118, 3003, 444, 959, 9669, 454, 1991, 969, 4554, 7117, 464, 2002, 979, 474, 8668, 989, 3553, 484, 6116, 999, 1001, 494, 7667, 2552, 505, 5115}

CONCLUSION FOR SET NOTES

Sets cannot be sliced or indexed.
Sets cannot contain other sets.
Sets do not have order; nor does the order of insertion guarantee that their values will be in order.
Sets do not keep track of a value's position.
   
  
  DICTIONARY IN PYTHON 3\
  
  dictionary is a data type that stores a collection (key,value) paris such that each key appears once in the collection.
  
  SOME IF ITS OPERATIONS:

-Adding a pair
-Removing a pair
-Modify an existing pair
-lookup of a value associated with a particular key

DEFINING IT

dict use {} like sets , however their individual item format is very different ( each item in dictionary be a pair of key: value.)

# Dictionary Example
sammy = {
    'username': 'sammy',
    'online': True,
    'followers': 42
}

# There are 3 items: each with their unique addresses and value
# Accessing
print('Sammy dict:', sammy)
print('Username:', sammy['username'])
print('Online Status:', sammy['online'])
print('Follower Count:', sammy['followers'])

OUTPUT WILL BE 

Sammy dict: {'username': 'sammy', 'online': True, 'followers': 42}
Username: sammy
Online Status: True
Follower Count: 42

KEY PROPERTYS OF DICT

must be immutable and unique( two same key values cannot exist in the same dictionary)

value: values of a dictionary within a key can be any data type.

MODYFING DICTIONAY

we can do this by refrencing the key, adding values by creating a new key, or overrridng a value at an existing key.

DELETION OF DICTIONARY

this can be done by delting the value connected to a key. Empting out a entire dictionary, or just deleting it,

example: 
 Deletion Example

sammy = {
    'username': 'sammy',
    'online': True,
    'followers': 42
}

del sammy['followers'] # del is a keyword used to help us to execute a removal
print('followers key deleted:', sammy)

sammy.clear() # {} is considered an empty dict
print('emptying out a dictionary', sammy)
print('--\n\n')

del sammy
print('Deleting sammy, should create an error when referenced again', sammy)


 MEMBERSHIP WITH DICTIONARY
 
 We can use the in and not in operators to check if a key exists in a dictionary

# Membership Example

sammy = {
    'username': 'sammy',
    'online': True,
    'followers': 42
}

print('Checking for key username:', 'username' in sammy)
print('Checking if followers is not a key:', 'followers' not in sammy)
Checking for key username: True
Checking if followers is not a key: False






Built-in Functions AND INTERACTIONS WITH DICT.

sammy = {
    'username': 'sammy',
    'online': True,
    'followers': 42
}

print('Size of sammy dict:', len(sammy))
print('Largest Key:', max(sammy))
print('Smallest Key:', min(sammy))
print('Dict to string:', str(sammy))
print('Dict to list:', list(sammy))
Size of sammy dict: 3
Largest Key: username
Smallest Key: followers
Dict to string: {'username': 'sammy', 'online': True, 'followers': 42}
Dict to list: ['username', 'online', 'followers']

DUPLICATING DICT EXAMPLE:
# Duplicate a Dictionary

sammy = {
    'username': 'sammy',
    'online': True,
    'followers': 42
}

sammy_copy1 = sammy.copy()
sammy_copy2 = sammy

sammy['verified'] = True

print('sammy_copy1:', sammy_copy1)
print('sammy_copy2:', sammy_copy2)
print('--')

# Duplicate keys only

tammy = tammy.fromkeys(sammy) # Notice that all key's values are None ... aka empty

print('tammy dict:', tammy)
sammy_copy1: {'username': 'sammy', 'online': True, 'followers': 42}
sammy_copy2: {'username': 'sammy', 'online': True, 'followers': 42, 'verified': True}
--

METHODS WITH DICTIONARY
A.keys() â€“> Returns a sequence of keys/addresses in A
A.values() â€“> Returns a sequence of item values in A
A.items() â€“> Returns a sequence of key,item pairs in A
A.get(address) â€“> Returns the item value at address
A.update(B) â€“> Extends A with the dictionary of key,value pairs of B

EXAMPLE



sammy = {
    'username': 'sammy',
    'online': True,
    'followers': 42
}

sammy_hidden = {
    'pwd' : 'qwerty',
    'location' : 'Toronto, Ontario'
}

# printing all the keys of a dict
print('Sammy Dict Keys:', sammy.keys()) # notice how it prints

sammy_keys = list(sammy.keys()) # we can listify the .keys() returned
print('List of sammy_keys', sammy_keys)
print('--')

# printing all the values of a dict
print('Sammy Dict Values:', sammy.values())
print('Sammy Dict Values as a list:', list(sammy.values()))
print('--')

# printing key, value pair of a dict
print('Sammy Dict key, value pairs:', sammy.items())
print('Sammy Dict key, value pairs as a list:', list(sammy.items()))
print('--')

# getting a value from a dict
print('Sammy followers value:', sammy.get('followers'))
print('Same as:', sammy['followers'])
print('--')

# updating / extending a dictionary
sammy.update(sammy_hidden)

print('Sammy extended with its hidden values:', sammy)
Sammy Dict Keys: dict_keys(['username', 'online', 'followers'])
List of sammy_keys ['username', 'online', 'followers']
--
Sammy Dict Values: dict_values(['sammy', True, 42])
Sammy Dict Values as a list: ['sammy', True, 42]
--
Sammy Dict key, value pairs: dict_items([('username', 'sammy'), ('online', True), ('followers', 42)])
Sammy Dict key, value pairs as a list: [('username', 'sammy'), ('online', True), ('followers', 42)]
--
Sammy followers value: 42
Same as: 42
--
Sammy extended with its hidden values: {'username': 'sammy', 'online': True, 'followers': 42, 'pwd': 'qwerty', 'location': 'Toronto, Ontario'}

iTERATING THROUGH A DICT

We will be taking advantage of three iteration methods
iterating the keys
iterating the values
iterating the key, value pairs by unpacking
# Iteration Example 1: Keys
sammy = {
    'username': 'sammy',
    'online': True,
    'followers': 42
}

for k in sammy.keys():
    print('Current key:', k)
print('--\n')

# Iteration Example 2: Values

for v in sammy.values():
    print('Current value:', v)
print('--\n')

# Iteration Example 3: Key, Value Pair

for k, v in sammy.items():
    print('Current Key:', k)
    print('Current Value:', v)
    print()

Current key: username
Current key: online
Current key: followers
--

Current value: sammy
Current value: True
Current value: 42
--

Current Key: username
Current Value: sammy

Current Key: online
Current Value: True

Current Key: followers
Current Value: 42

TURNING OTHER DATA TYPES INTO DICT. TO DO THIS WE GOTTA SEPCIFY WHERE THE KEYS AND WHERE THE VALUES .

# dict() Example

example_data = [
    ('one', 3),
    ('two', 3),
    ('three', 5)
]

data_dict = dict(example_data)
print('data_dict:', data_dict)
print('--')

# Dictionary Comprehension
# Goal: Take string numerals and assign them with their integer square
# - keys : string numerals
# - values: integer squares

example_data2 = ['1', '2', '3', '4', '5']

data2_dict = {x : int(x)**2 for x in example_data2}

print('data2_dict:', data2_dict)
data_dict: {'one': 3, 'two': 3, 'three': 5}
--
data2_dict: {'1': 1, '2': 4, '3': 9, '4': 16, '5': 25}

