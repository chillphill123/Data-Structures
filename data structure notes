MATRICS & LIST COMPREHENSION

# MATRIX

# Matrix: is a representation of numbers, symbols or expressions in a 2 dimensional array. 

# Can create data structers that has values in rows and columns, much like a table.

# a list within a list

# Representation of matrix

matrix_A = [
    [1,2,3,4,5],
    [6,7,8,9,10]
]

# Accesing our matrix
print('row1:', matrix_A[0])
print('Row 2 Column 2:', matrix_A[1][1])

# rules of matrix
'''
- All rows must have the same number of values
- All columns must have the same number of values
- All items in the 2D List must have the same data types
- Since indexing always starts at 0 ... row 1 is technically located at matrix_A[0]
'''

# LIST COMPREHENSION

# list comprehension is a conise method to create list in python 3.

# Used when
'''
-The list is a result of some operations applied to all its items
-It is a made from another sequence/iterable data
-The list is member of another list/sequence/iterable data that satisfies a certain condition
'''
# Normal way
squares = []
for i in range(10):
    squares.append(i**2)
print('our result', squares)

# List comprehension way
squares = [i**2 for i in range(10)]
print('our result', squares)

# How it works:
'''
-A Square Bracket containing an expression that describes the list
-One or more For clause to explain its members
-Then a zero or more if clauses depending on the complexity of the list
'''
# i**2 for i in range(10) --> is the expression that describes the list.

# i**2 describes each item in the list

# i is taken from the clause 

# for i in range(10) describes where i comes from.

# EXAMPLE 2

a = [1,2,3]
b = [3,1,4]

result = [[x,y] for x in a for y in b if x !=y]
print(result)

# x comes from a
# y comes from b

# EXAMPLE 3

vec = [[1,2,3], [4,5,6], [7,8,9,]]
result = [value for row in vec for value in row]
print(result)

# vec is an example of a matrix in python 3 by uding list of lists

# to grab each value we must explain what each item in the list comprehension is going to be. named value.
# to access value where value is, define where it comes from in our case --. 'row'; there we use 'for row in vec'. finally we use our last clause to denote that value comes from the row.

# CLAUSES MATTER.


MAP & FILTER

# the idea of a map function is to apply a function to an iterable data type.

# formatting: map(function_name, sequence)

# - where the function name is any function (built in or not) that returns a desired value of choice
# - sequence is an iterable data type

# EXAMPLE

def square(num):
    # square is the given num argument
    return num ** 2
array = list(range(1,11))
square_array = list(map(square, array))
# takes value from square function 
print('array sqaured', square_array)

# our original array is just a count up to 11

# our sqared array is the numbers to 11 squared

# map functions dont return a specific data type, but rather an iterabele data type.

# EXAMPLE 2

def upper(x):
    # upper returns string x into upper case
    return x.upper()
word = 'hello world'
upper_word = ''.join(list(map(upper, word)))
print(word)
print(upper_word)
print(word.upper())
'''
In Example 2, we perform a lot of extra effort to make our original word variable uppercase. This is an example of why you shouldn't use map() to make minor modifications to a string.

This holds true for every data structure with methods. You don't want to use methods with map since there is a good chance that there is already a method for what you want to achieve
'''

# FILTER FUNCTION

# The idea is to filter out items from a data set that meets a certain condition

# formatting: filter(bool_returning_function, sequence)

#-- function: The function name we provide for filter() must be return a boolean value ... should also be able handle the items inside the sequence as its arguments
#-- sequence: any iterable data type

# IS ODD FILTER

def isOdd(x):
    # returns true if x is odd
    return x % 2 != 0


array = list(range(1,101))
odds = list(filter(isOdd, array))

print('Odd Numbers from 1 to 100:', odds)

# filters out variables that satisfy the condition above (make condition = True)

# FILTER PALINDROME

def isPalindrome(x):
    # if x is a palindrome return true
    return x == x[::-1]
array = list(range(1,1000))
palindrome_numbers = list(map(int, filter(isPalindrome, map(str, array))))
print('Palindromic Numbers from 1 to 10,000', palindromicNumbers

# string version of the array --> map(str, array)
      '''
      Function Composition Breakdown
1. string version of the array --> map(str, array)
2. filter out the palindrome --> filter(isPalindrome, string version of the array)
3. remap all values back to integers --> map(int, palindromes)
4. turn the mapped integers iterable back inside a list --> list(palindromicIterables)

How it would looked with multiple defined variables:

array = list(range(1,10000))
str_array = map(str, array)
palindromes = filter(isPalindrome, str_array)
palindromics = map(int, palindromes)

palindromic_numbers = list(palindromes)
'''

TUPLES
